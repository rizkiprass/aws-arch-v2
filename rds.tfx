locals {
  name   = "production-enabler-apps"
  region = var.aws_region
  tags = {
    Customer = var.customer
    environment = var.environment
  }

  engine                = "mysql"
  engine_version        = "5.7.34"
  family                = "mysql57" # DB parameter group
  major_engine_version  = "5.7"      # DB option group
  instance_class        = "db.m5.large"
  allocated_storage     = 30
  port                  = 3306
}

resource "random_string" "dbpass" {
  length           = 32
  upper            = true
  lower            = true
  number           = true
  special          = true
  override_special = "#$!^"
}
################################################################################
# Master DB
################################################################################

module "master" {
  source = "terraform-aws-modules/rds/aws"
  version = "~> 3.0"

  identifier = local.name

  engine               = local.engine
  engine_version       = local.engine_version
  family               = local.family
  major_engine_version = local.major_engine_version
  instance_class       = local.instance_class

  // Only support for >= t3.medium
  //performance_insights_enabled = true
  //performance_insights_retention_period = 7

  #max_allocated_storage = 1000

  auto_minor_version_upgrade = false

  allocated_storage     = local.allocated_storage
  storage_encrypted     = true

  port     = local.port

  multi_az               = false
  create_db_subnet_group = false
  db_subnet_group_name   = aws_db_subnet_group.rds-subnet.name
  vpc_security_group_ids = ["sg-00506adcacb9578ce"]

  maintenance_window              = "Mon:00:00-Mon:03:00"
  backup_window                   = "03:00-06:00"
  enabled_cloudwatch_logs_exports = ["postgresql"]

  # Backups are required in order to create a replica
  backup_retention_period = 1
  skip_final_snapshot     = true
  deletion_protection     = true
  username = "master"
  password = random_string.dbpass.result
  availability_zone = "ap-southeast-1a"

  tags = {
    Name = format("%s-%s-RDS", var.customer, var.environment)
    ENVIRONMENT = var.environment
  }
}

resource "aws_db_subnet_group" "rds-subnet" {
  name = format("%s-%s-rds-subnet", "ifg", "poc")
  subnet_ids = ["subnet-0de84a7de5f24cffb", "subnet-00123383cfea4e0c8"]

  tags = {
    Name = format("%s-%s-SUBNET-GROUP", var.customer, var.environment)
    ENVIRONMENT = var.environment
  }
}


output "dbpass" {
  value = random_string.dbpass.result
}